name: Build and Push Lambda Images to ECR

on:
  push:
    branches: [ "main" ]
    paths:
      - 'modules/lambda/**'
      - '.github/workflows/build-and-push-lambda-images.yml'
  workflow_dispatch:

concurrency:
  group: build-lambda-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ap-southeast-1
      AWS_ROLE_TO_ASSUME: ${{ vars.AWS_ROLE_TO_ASSUME }}
      PROJECT_NAME: ${{ vars.PROJECT_NAME || 'iot-platform' }}
      ENVIRONMENT: ${{ vars.ENVIRONMENT || 'dev' }}
      IMAGE_TAG: ${{ vars.LAMBDA_IMAGE_TAG || 'latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Resolve ECR repository URLs
        id: ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=${ACCOUNT_ID}" >> $GITHUB_OUTPUT
          STREAM_REPO_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-stream-processor-${ENVIRONMENT}"
          QUERY_REPO_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-query-handler-${ENVIRONMENT}"
          echo "stream_repo_url=${STREAM_REPO_URL}" >> $GITHUB_OUTPUT
          echo "query_repo_url=${QUERY_REPO_URL}" >> $GITHUB_OUTPUT

      - name: Build and push stream-processor image
        working-directory: modules/lambda
        run: |
          docker build -f docker/stream_processor.Dockerfile -t "${{ steps.ecr.outputs.stream_repo_url }}:${IMAGE_TAG}" .
          docker push "${{ steps.ecr.outputs.stream_repo_url }}:${IMAGE_TAG}"

      - name: Build and push query-handler image
        working-directory: modules/lambda
        run: |
          docker build -f docker/query_handler.Dockerfile -t "${{ steps.ecr.outputs.query_repo_url }}:${IMAGE_TAG}" .
          docker push "${{ steps.ecr.outputs.query_repo_url }}:${IMAGE_TAG}"

      - name: Update Lambda functions to new images
        env:
          STREAM_FUNCTION_NAME: ${{ env.PROJECT_NAME }}-stream-processor-${{ env.ENVIRONMENT }}
          QUERY_FUNCTION_NAME: ${{ env.PROJECT_NAME }}-query-handler-${{ env.ENVIRONMENT }}
        run: |
          set -euo pipefail
          aws lambda update-function-code \
            --function-name "${STREAM_FUNCTION_NAME}" \
            --image-uri "${{ steps.ecr.outputs.stream_repo_url }}:${IMAGE_TAG}" | cat

          aws lambda update-function-code \
            --function-name "${QUERY_FUNCTION_NAME}" \
            --image-uri "${{ steps.ecr.outputs.query_repo_url }}:${IMAGE_TAG}" | cat


